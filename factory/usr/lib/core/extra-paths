#!/bin/sh

set -eu

cat <<'EOF' >>/sysroot/etc/fstab
/run/mnt/data /writable none bind,x-initrd.mount 0 0
EOF

# Find out kernel name / revision
kernelPath=$(cat /sys/dev/block/"$(mountpoint --fs-devno /run/mnt/kernel)"/loop/backing_file)
kernelFile=$(basename "$kernelPath")
kernelName=${kernelFile%%_*}
rev=${kernelFile#*_}
rev=${rev%%.*}

if [ -d /run/mnt/data/system-data/var/lib/snapd/kernel/"$kernelName"/"$rev" ]; then
    cat <<EOF >>/sysroot/etc/fstab
/var/lib/snapd/kernel/$kernelName/$rev/lib/firmware /usr/lib/firmware none bind,x-initrd.mount 0 0
/var/lib/snapd/kernel/$kernelName/$rev/lib/modules /usr/lib/modules none bind,x-initrd.mount 0 0
EOF
else
    # /lib/{firmware,modules} from the snap only if there is no drivers tree created by snapd
    cat <<'EOF' >>/sysroot/etc/fstab
/run/mnt/kernel/firmware /usr/lib/firmware none bind,x-initrd.mount 0 0
/run/mnt/kernel/modules /usr/lib/modules none bind,x-initrd.mount 0 0
EOF
    for subdir in firmware modules; do
        drop_d=/usr/lib/systemd/system/sysroot-usr-lib-"$subdir".mount.d
        mkdir -p "$drop_d"
        cat <<EOF >"$drop_d"/what.conf
[Mount]
# systemd-fstab-generator tries to be smart and uses
# /sysroot/run/mnt/kernel/$subdir, so we need to set the path
What=/run/mnt/kernel/$subdir
EOF
    done
fi
